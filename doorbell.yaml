blueprint:
  name: Doorbell Automation
  description: >
    # ðŸ”” Doorbell Automation
    **Version: 1.0**

    ## Supported Platforms
    - Zigbee2MQTT/MQTT Button
    - ZHA Button (comming soon)

    This blueprint allows you to set up a doorbell automation that can flash lights,

    play sounds, send notifications, and execute custom actions when a doorbell is pressed.

    You can customize the behavior based on whether anyone is home or not.

    ## :music: Doorbell Sounds that you can use (or use your own)
    - https://raw.githubusercontent.com/Fredrik81/HASS/refs/heads/main/doorbell/doorbell.mp3
    - https://raw.githubusercontent.com/Fredrik81/HASS/refs/heads/main/doorbell/halloween.mp3
    - https://raw.githubusercontent.com/Fredrik81/HASS/refs/heads/main/doorbell/christmas.mp3
    - https://raw.githubusercontent.com/Fredrik81/HASS/refs/heads/main/doorbell/christmas2.mp3


    This automation uses code from: https://community.home-assistant.io/t/650166

    [![ko-fi](https://ko-fi.com/img/githubbutton_sm.svg)](https://ko-fi.com/M4M4ZS0Y)
  domain: automation
  source_url: https://raw.githubusercontent.com/Fredrik81/HASS/refs/heads/main/doorbell.yaml
  input:
    trigger_config:
      name: "General Settings"
      icon: mdi:cog
      collapsed: false
      input:
        button_device:
          name: Doorbell Button (MQTT)
          description: Select the Zigbee2MQTT button to trigger the doorbell.
          selector:
            device:
              filter:
                - integration: mqtt
        zone_entity:
          name: Presence Zone
          description: Zone entity to check for presence (e.g., zone.home).
          selector:
            entity:
              domain: zone
          default: zone.home
    music_config:
      name: "Music Playback Settings"
      icon: mdi:music
      collapsed: true
      input:
        enable_music:
          name: Enable Music Playback
          description: Enable or disable playing music when the doorbell is triggered.
          default: true
          selector:
            boolean: {}
        media_zone_condition:
          name: When to play media
          description: Choose when to play media based on zone presence.
          default: always
          selector:
            select:
              options:
                - label: Always
                  value: always
                - label: Only if someone is in the zone
                  value: in
                - label: Only if no one is in the zone
                  value: out
        media_url:
          name: Media File URL
          description: URL of the media file to play (e.g., MP3).
          default: https://raw.githubusercontent.com/Fredrik81/HASS/refs/heads/main/doorbell/doorbell.mp3
          selector:
            text:
              type: url
        media_players:
          name: Media Players
          description: Select media players to play the doorbell sound.
          selector:
            target:
              entity:
                domain: media_player
    notification_config:
      name: "Notification Settings"
      icon: mdi:bell
      collapsed: true
      input:
        enable_notification:
          name: Enable Notifications
          description: Optionally notify a mobile device.
          default: false
          selector:
            boolean: {}
        notify_zone_condition:
          name: When to send notification
          description: Choose when to send the notification based on zone presence.
          default: always
          selector:
            select:
              options:
                - label: Always
                  value: always
                - label: Only if someone is in the zone
                  value: in
                - label: Only if no one is in the zone
                  value: out
        notification_title:
          name: Notification Title
          description: Title of the notification. Defaults to "Doorbell Alert!".
          default: "Doorbell Alert!"
          selector:
            text: {}

        notification_message:
          name: Notification Message
          description: Message of the notification. Defaults to "Someone is at the door!".
          default: "Someone is at the door!"
          selector:
            text: {}
        notify_target:
          name: Notification Target
          description: Mobile app notify target (e.g. notify.mobile_app_xyz)
          default: []
          selector:
            device:
              filter:
                - integration: mobile_app
              multiple: true
        notification_interruption_level:
          name: Interruption Level - iOS Only
          description: >
            On devices running iOS 15 and later, you can configure the interruption level for your notifications to ensure they are delivered according to your preferences.
            Choose the desired interruption level from the dropdown list.
            Critical and time-sensitive notifications must be turned ON within the Home Assistant App, and time-sensitive notifications must be allowed in your Focus settings.
          default: active
          selector:
            select:
              mode: dropdown
              options:
                - label: Default
                  value: "active"
                - label: Critical Notifications
                  value: "critical"
                - label: Time Sensitive Notifications
                  value: "time-sensitive"
                - label: Quiet Notifications Without Waking Screen
                  value: "passive"
        notification_sound:
          name: Notification Sound - iOS Only
          description: >
            Sounds are from built-in iOS sounds.
          default: ''
          selector:
            select:
              mode: dropdown
              options:
              - label: Default
                value: ''
              - label: Doorbell
                value: Doorbell.caf
              - label: News Flash
                value: News_Flash.caf
              - label: Choo Choo
                value: Choo_Choo.caf
              - label: Nano
                value: NanoAlert5.caf
        notification_data:
          name: Android Only Options (Optional)
          description: >
            **High Priority** notifications ensure that you receive important alerts immediately.
            These notifications bypass normal delivery delays and are delivered instantly to your device.


            **Sticky Notification** ensure that important alerts are not dismissed when selected. They remain on your notification screen until you actively clear or swipe them away, ensuring that critical information stays visible until addressed.


            **Notification Channel** allow you to easily organize different notification settings,
            including notification sounds, vibrations, and other device-specific features.
            If you choose this option, please enter your desired channel name below.


            For more information on notification options [Click Here](https://community.home-assistant.io/t/650166/278)
          default: []
          selector:
            select:
              multiple: true
              options:
                - label: High Priority
                  value: "high_priority"
                - label: Sticky Notification
                  value: "sticky"
                - label: Notification Channel
                  value: "channel"
        notification_channel:
          name: Notification Channel - Android Only
          description: >
            If you have chosen to use a notification channel, simply enter the name of an existing channel to apply its pre-configured settings.
            If you don't have a channel yet, you can create a new one by entering a name here.
            When your automation sends the first notification, it will create the channel on your device.
            After the channel is created, you can customize its notification settings to your preference directly on your device.
          default: []
          selector:
            text:
    custom_actions:
      name: "Custom Actions"
      icon: mdi:script-text
      collapsed: true
      input:
        enable_custom_actions:
          name: Enable Custom Actions
          description: Enable or disable custom actions when the doorbell is triggered.
          default: false
          selector:
            boolean: {}

        custom_actions_presence_condition:
          name: Custom Actions Presence Condition
          description: Choose when to execute custom actions based on zone presence.
          default: always
          selector:
            select:
              options:
                - label: Always
                  value: always
                - label: Only if someone is in the zone
                  value: in
                - label: Only if no one is in the zone
                  value: out
        custom_actions:
          name: Custom Actions
          description: >
            Optional custom actions to execute when the doorbell is pressed.
            This can be a script, scene, or any other service call.
          default: []
          selector:
            action: {}

variables:
  zone: !input zone_entity
  zone_name: "{{ state_attr(zone, 'friendly_name') | lower }}"
  someone_in_zone: >
    {{ expand(states.person) | selectattr('state', 'defined') |
       map(attribute='state') | map('lower') |
       select('equalto', zone_name) | list | count > 0 }}
  media_zone_condition: !input media_zone_condition
  notify_zone_condition: !input notify_zone_condition
  enable_notification: !input enable_notification
  notify_target: !input notify_target
  media_url: !input media_url
  media_players: !input media_players
  enable_music: !input enable_music
  enable_custom_actions: !input enable_custom_actions
  custom_actions_presence_condition: !input custom_actions_presence_condition
  custom_actions: !input custom_actions

  #Notification variables
  notification_interruption_level: !input notification_interruption_level
  notification_sound: !input notification_sound
  notification_data: !input notification_data
  notification_channel: !input notification_channel
  notification_title: !input notification_title
  notification_message: !input notification_message
  notification_msg_data: >-
    {% set message = namespace(data={}) %}
    {% set push = namespace(data={}) %}
    {% if notification_interruption_level in ['active', 'critical', 'time-sensitive', 'passive'] %}
      {% set push.data = dict(push.data, **{ 'interruption-level': notification_interruption_level }) %}
    {% endif %}
    {% if notification_sound != '' %}
      {% set push.data = dict(push.data, **{
        'sound': { 'name': notification_sound }
      }) %}
    {% endif %}
    {% if push.data %}
      {% set message.data = dict(message.data, **{ 'push': push.data }) %}
    {% endif %}
    {% if 'high_priority' in notification_data %}
      {% set message.data = dict(message.data, **{ 'ttl': 0, 'priority': 'high' }) %}
    {% endif %}
    {% if 'channel' in notification_data %}
      {% set message.data = dict(message.data, **{ 'channel': notification_channel }) %}
    {% endif %}
    {% if 'sticky' in notification_data %}
      {% set message.data = dict(message.data, **{ 'sticky': "true" }) %}
    {% endif %}
    {{ message.data }}

triggers:
  - platform: device
    device_id: !input button_device
    domain: mqtt
    type: action
    subtype: single

condition: []

action:
  - service: system_log.write
    data:
      message: >
        media_zone_condition={{ media_zone_condition }},
        someone_in_zone={{ someone_in_zone }},
        enable_notification={{ enable_notification }},
        notify_zone_condition={{ notify_zone_condition }}
      level: warning
  - choose:
      - alias: "Check if media should play"
        conditions:
          - condition: template
            value_template: "{{ enable_music }}" # Check if music playback is enabled
          - condition: template
            value_template: "{{ media_zone_condition == 'always' or (media_zone_condition == 'in' and someone_in_zone) or (media_zone_condition == 'out' and not someone_in_zone) }}"
        sequence:
          - service: media_player.play_media
            data:
              media_content_id: "{{ media_url }}"
              media_content_type: music
            target: !input media_players

  - choose:
      - alias: "Check if notification should be sent"
        conditions:
          - condition: template
            value_template: "{{ enable_notification }}" # Check if notification is enabled
          - condition: template
            value_template: "{{ notify_zone_condition == 'always' or (notify_zone_condition == 'in' and someone_in_zone) or (notify_zone_condition == 'out' and not someone_in_zone) }}"
        sequence:
          - alias: Send a notification to each device
            repeat:
              for_each: !input notify_target
              sequence:
                - action: "notify.mobile_app_{{ device_attr(repeat.item, 'name') | slugify }}"
                  data:
                    title: "{{ notification_title }}"
                    message: "{{ notification_message }}"
                    data: "{{ notification_msg_data }}"
  - choose:
      - alias: "Check if custom actions should run"
        conditions:
          - condition: template
            value_template: "{{ enable_custom_actions }}" # Check if custom actions are enabled
          - condition: template
            value_template: >
              {{ custom_actions_presence_condition == 'always' or
                 (custom_actions_presence_condition == 'in' and someone_in_zone) or
                 (custom_actions_presence_condition == 'out' and not someone_in_zone) }}
        sequence: !input custom_actions # Execute the custom actions
